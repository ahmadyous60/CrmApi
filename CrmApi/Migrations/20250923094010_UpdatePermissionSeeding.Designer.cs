// <auto-generated />
using System;
using CrmApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CrmApi.Migrations
{
    [DbContext(typeof(CrmDbContext))]
    [Migration("20250923094010_UpdatePermissionSeeding")]
    partial class UpdatePermissionSeeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CrmApi.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CrmApi.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Industry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("CrmApi.Models.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailingCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailingCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailingState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailingStreet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailingZip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherStreet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportingTo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("CrmApi.Models.Deal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Deals");
                });

            modelBuilder.Entity("CrmApi.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("CrmApi.Models.Lead", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Product")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Leads");
                });

            modelBuilder.Entity("CrmApi.Models.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("CrmApi.Models.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("926e654e-7c2b-4c24-8c12-7a594a4008e0"),
                            Description = "View users",
                            Name = "Users.View"
                        },
                        new
                        {
                            Id = new Guid("1b6fb93e-6e53-4385-b284-d72e1ac92873"),
                            Description = "Add users",
                            Name = "Users.Add"
                        },
                        new
                        {
                            Id = new Guid("d4a75f2b-e9f1-4bf7-8713-4149f1c05d71"),
                            Description = "Edit users",
                            Name = "Users.Edit"
                        },
                        new
                        {
                            Id = new Guid("185b4989-d80d-4bbc-9cc2-aafc1d05f7ed"),
                            Description = "Delete users",
                            Name = "Users.Delete"
                        },
                        new
                        {
                            Id = new Guid("e2f7c163-e7e8-49f7-9dd0-25662363524e"),
                            Description = "View leads",
                            Name = "Leads.View"
                        },
                        new
                        {
                            Id = new Guid("e2e6f8ce-176f-4599-b92e-dcc5fb3050cb"),
                            Description = "Add leads",
                            Name = "Leads.Add"
                        },
                        new
                        {
                            Id = new Guid("7aa1fd07-7726-414e-9dce-1723586c128e"),
                            Description = "Edit leads",
                            Name = "Leads.Edit"
                        },
                        new
                        {
                            Id = new Guid("82e99d1d-5da6-4540-bfe1-0d9b4e8278bb"),
                            Description = "Delete leads",
                            Name = "Leads.Delete"
                        },
                        new
                        {
                            Id = new Guid("61ebea0b-5e99-445f-94dc-f90b6a62d631"),
                            Description = "Export leads",
                            Name = "Leads.Export"
                        },
                        new
                        {
                            Id = new Guid("504672a9-2f7f-4480-9d06-4826a6de01d5"),
                            Description = "View deals",
                            Name = "Deals.View"
                        },
                        new
                        {
                            Id = new Guid("ea2a225b-01fb-4a95-a42b-6814a478b91d"),
                            Description = "Add deals",
                            Name = "Deals.Add"
                        },
                        new
                        {
                            Id = new Guid("25d79875-6cbb-49dc-9fa0-f7fd1a5ef611"),
                            Description = "Edit deals",
                            Name = "Deals.Edit"
                        },
                        new
                        {
                            Id = new Guid("17817170-947b-4e96-9e11-192b2fbed308"),
                            Description = "Delete deals",
                            Name = "Deals.Delete"
                        },
                        new
                        {
                            Id = new Guid("454f0f6a-a216-45ab-b78b-d2079cb4d608"),
                            Description = "View contacts",
                            Name = "Contacts.View"
                        },
                        new
                        {
                            Id = new Guid("197de633-9f35-4da3-a20f-77d08f9843ab"),
                            Description = "Add contacts",
                            Name = "Contacts.Add"
                        },
                        new
                        {
                            Id = new Guid("fd4af3cb-df9f-4307-8727-b77b10982e46"),
                            Description = "Edit contacts",
                            Name = "Contacts.Edit"
                        },
                        new
                        {
                            Id = new Guid("62de43a8-2855-44ba-871e-40e938396df5"),
                            Description = "Delete contacts",
                            Name = "Contacts.Delete"
                        },
                        new
                        {
                            Id = new Guid("befb6f03-7c95-4ffe-85f1-59be64958175"),
                            Description = "View companies",
                            Name = "Companies.View"
                        },
                        new
                        {
                            Id = new Guid("619e7d84-a439-496f-81c0-b4a979af3c66"),
                            Description = "Add companies",
                            Name = "Companies.Add"
                        },
                        new
                        {
                            Id = new Guid("0e29daf9-7fac-4fc8-9532-4e499e4afde7"),
                            Description = "Edit companies",
                            Name = "Companies.Edit"
                        },
                        new
                        {
                            Id = new Guid("98bcfa90-8de9-499e-9455-aab4087d8c8a"),
                            Description = "Delete companies",
                            Name = "Companies.Delete"
                        });
                });

            modelBuilder.Entity("CrmApi.Models.RoleAccess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PermissionId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("PermissionId1");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleAccesses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000004"),
                            PermissionId = new Guid("454f0f6a-a216-45ab-b78b-d2079cb4d608"),
                            RoleId = "ab6ef452-b89e-4382-9cb7-a2f9ae074e5a"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000005"),
                            PermissionId = new Guid("befb6f03-7c95-4ffe-85f1-59be64958175"),
                            RoleId = "ab6ef452-b89e-4382-9cb7-a2f9ae074e5a"
                        },
                        new
                        {
                            Id = new Guid("4460be55-45fc-4725-8f75-1ef5875f6bba"),
                            PermissionId = new Guid("e2f7c163-e7e8-49f7-9dd0-25662363524e"),
                            RoleId = "1e13facc-515f-40d1-8c0d-196a8374e104"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000006"),
                            PermissionId = new Guid("e2e6f8ce-176f-4599-b92e-dcc5fb3050cb"),
                            RoleId = "1e13facc-515f-40d1-8c0d-196a8374e104"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000007"),
                            PermissionId = new Guid("7aa1fd07-7726-414e-9dce-1723586c128e"),
                            RoleId = "1e13facc-515f-40d1-8c0d-196a8374e104"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000010"),
                            PermissionId = new Guid("504672a9-2f7f-4480-9d06-4826a6de01d5"),
                            RoleId = "1e13facc-515f-40d1-8c0d-196a8374e104"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000011"),
                            PermissionId = new Guid("ea2a225b-01fb-4a95-a42b-6814a478b91d"),
                            RoleId = "1e13facc-515f-40d1-8c0d-196a8374e104"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000012"),
                            PermissionId = new Guid("25d79875-6cbb-49dc-9fa0-f7fd1a5ef611"),
                            RoleId = "1e13facc-515f-40d1-8c0d-196a8374e104"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000014"),
                            PermissionId = new Guid("454f0f6a-a216-45ab-b78b-d2079cb4d608"),
                            RoleId = "1e13facc-515f-40d1-8c0d-196a8374e104"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000015"),
                            PermissionId = new Guid("197de633-9f35-4da3-a20f-77d08f9843ab"),
                            RoleId = "1e13facc-515f-40d1-8c0d-196a8374e104"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000016"),
                            PermissionId = new Guid("fd4af3cb-df9f-4307-8727-b77b10982e46"),
                            RoleId = "1e13facc-515f-40d1-8c0d-196a8374e104"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000018"),
                            PermissionId = new Guid("befb6f03-7c95-4ffe-85f1-59be64958175"),
                            RoleId = "1e13facc-515f-40d1-8c0d-196a8374e104"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000019"),
                            PermissionId = new Guid("619e7d84-a439-496f-81c0-b4a979af3c66"),
                            RoleId = "1e13facc-515f-40d1-8c0d-196a8374e104"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000020"),
                            PermissionId = new Guid("0e29daf9-7fac-4fc8-9532-4e499e4afde7"),
                            RoleId = "1e13facc-515f-40d1-8c0d-196a8374e104"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000001"),
                            PermissionId = new Guid("82e99d1d-5da6-4540-bfe1-0d9b4e8278bb"),
                            RoleId = "38e3e873-009f-4765-bfab-e58b39f12c64"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000002"),
                            PermissionId = new Guid("7aa1fd07-7726-414e-9dce-1723586c128e"),
                            RoleId = "38e3e873-009f-4765-bfab-e58b39f12c64"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000003"),
                            PermissionId = new Guid("17817170-947b-4e96-9e11-192b2fbed308"),
                            RoleId = "38e3e873-009f-4765-bfab-e58b39f12c64"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000004"),
                            PermissionId = new Guid("e2f7c163-e7e8-49f7-9dd0-25662363524e"),
                            RoleId = "38e3e873-009f-4765-bfab-e58b39f12c64"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000005"),
                            PermissionId = new Guid("62de43a8-2855-44ba-871e-40e938396df5"),
                            RoleId = "38e3e873-009f-4765-bfab-e58b39f12c64"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000006"),
                            PermissionId = new Guid("d4a75f2b-e9f1-4bf7-8713-4149f1c05d71"),
                            RoleId = "38e3e873-009f-4765-bfab-e58b39f12c64"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000007"),
                            PermissionId = new Guid("504672a9-2f7f-4480-9d06-4826a6de01d5"),
                            RoleId = "38e3e873-009f-4765-bfab-e58b39f12c64"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000008"),
                            PermissionId = new Guid("0e29daf9-7fac-4fc8-9532-4e499e4afde7"),
                            RoleId = "38e3e873-009f-4765-bfab-e58b39f12c64"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000009"),
                            PermissionId = new Guid("befb6f03-7c95-4ffe-85f1-59be64958175"),
                            RoleId = "38e3e873-009f-4765-bfab-e58b39f12c64"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000010"),
                            PermissionId = new Guid("ea2a225b-01fb-4a95-a42b-6814a478b91d"),
                            RoleId = "38e3e873-009f-4765-bfab-e58b39f12c64"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000011"),
                            PermissionId = new Guid("197de633-9f35-4da3-a20f-77d08f9843ab"),
                            RoleId = "38e3e873-009f-4765-bfab-e58b39f12c64"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000012"),
                            PermissionId = new Guid("926e654e-7c2b-4c24-8c12-7a594a4008e0"),
                            RoleId = "38e3e873-009f-4765-bfab-e58b39f12c64"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000013"),
                            PermissionId = new Guid("98bcfa90-8de9-499e-9455-aab4087d8c8a"),
                            RoleId = "38e3e873-009f-4765-bfab-e58b39f12c64"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000014"),
                            PermissionId = new Guid("185b4989-d80d-4bbc-9cc2-aafc1d05f7ed"),
                            RoleId = "38e3e873-009f-4765-bfab-e58b39f12c64"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000015"),
                            PermissionId = new Guid("619e7d84-a439-496f-81c0-b4a979af3c66"),
                            RoleId = "38e3e873-009f-4765-bfab-e58b39f12c64"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000016"),
                            PermissionId = new Guid("fd4af3cb-df9f-4307-8727-b77b10982e46"),
                            RoleId = "38e3e873-009f-4765-bfab-e58b39f12c64"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000017"),
                            PermissionId = new Guid("454f0f6a-a216-45ab-b78b-d2079cb4d608"),
                            RoleId = "38e3e873-009f-4765-bfab-e58b39f12c64"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000018"),
                            PermissionId = new Guid("1b6fb93e-6e53-4385-b284-d72e1ac92873"),
                            RoleId = "38e3e873-009f-4765-bfab-e58b39f12c64"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000019"),
                            PermissionId = new Guid("e2e6f8ce-176f-4599-b92e-dcc5fb3050cb"),
                            RoleId = "38e3e873-009f-4765-bfab-e58b39f12c64"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000020"),
                            PermissionId = new Guid("25d79875-6cbb-49dc-9fa0-f7fd1a5ef611"),
                            RoleId = "38e3e873-009f-4765-bfab-e58b39f12c64"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000021"),
                            PermissionId = new Guid("61ebea0b-5e99-445f-94dc-f90b6a62d631"),
                            RoleId = "38e3e873-009f-4765-bfab-e58b39f12c64"
                        });
                });

            modelBuilder.Entity("CrmApi.Models.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("CrmApi.Models.RoleAccess", b =>
                {
                    b.HasOne("CrmApi.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CrmApi.Models.Permission", null)
                        .WithMany("RoleAccessses")
                        .HasForeignKey("PermissionId1");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CrmApi.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CrmApi.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CrmApi.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CrmApi.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RefreshToken", b =>
                {
                    b.HasOne("CrmApi.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CrmApi.Models.Permission", b =>
                {
                    b.Navigation("RoleAccessses");
                });
#pragma warning restore 612, 618
        }
    }
}
